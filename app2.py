{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "204a50b2-94de-4e26-96f8-be259f1f9c45",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from googletrans import Translator\n",
    "\n",
    "# ---------------------------\n",
    "# Load CSV files (make sure they are in your repo)\n",
    "# ---------------------------\n",
    "buyers_df = pd.read_csv(\"buyers.csv\")\n",
    "crops_df = pd.read_csv(\"crops.csv\")\n",
    "locations_df = pd.read_csv(\"locations.csv\")\n",
    "\n",
    "# Translator setup\n",
    "translator = Translator()\n",
    "\n",
    "st.title(\"ðŸŒ¾ Agrimitra - Crop Recommendation System\")\n",
    "\n",
    "# ---------------------------\n",
    "# Step 1: Farmer Input (via Streamlit widgets)\n",
    "# ---------------------------\n",
    "st.subheader(\"Enter Farmer Details\")\n",
    "\n",
    "farmer_location = st.text_input(\"Enter your Location (e.g., Coimbatore)\")\n",
    "farmer_soil = st.text_input(\"Enter your Soil Type (e.g., Black, Red, Loamy)\")\n",
    "farmer_season = st.text_input(\"Enter Current Season (Monsoon, Rabi/Winter, Summer)\")\n",
    "farmer_area = st.number_input(\"Enter your Land Area (hectares)\", min_value=0.1, step=0.1)\n",
    "\n",
    "if st.button(\"Get Recommendation\"):\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 2: Filter Suitable Crops by Location\n",
    "    # ---------------------------\n",
    "    location_info = locations_df[locations_df['Location'].str.lower() == farmer_location.lower()]\n",
    "\n",
    "    if location_info.empty:\n",
    "        suitable_crops_list = crops_df['Crop'].tolist()\n",
    "    else:\n",
    "        location_info = location_info.iloc[0]\n",
    "        suitable_crops_list = [crop.strip() for crop in location_info['Top3SuitableCrops'].split(',')]\n",
    "\n",
    "    suitable_crops_df = crops_df[crops_df['Crop'].isin(suitable_crops_list)].copy()\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 3: Compute MarketScore\n",
    "    # ---------------------------\n",
    "    max_price = suitable_crops_df['AvgPrice_INRkg'].max()\n",
    "    max_demand = suitable_crops_df['BuyerDemand_kg'].max()\n",
    "\n",
    "    def compute_market_score(row):\n",
    "        norm_price = row['AvgPrice_INRkg'] / max_price\n",
    "        norm_demand = row['BuyerDemand_kg'] / max_demand\n",
    "        soil_match = 1 if farmer_soil.lower() in row['SuitableSoils'].lower() else 0\n",
    "        season_match = 1 if farmer_season.lower() in row['SuitableSeasons'].lower() else 0\n",
    "        suitability = 0.5 * soil_match + 0.5 * season_match\n",
    "        return 0.5 * norm_price + 0.3 * norm_demand + 0.2 * suitability\n",
    "\n",
    "    suitable_crops_df['MarketScore'] = suitable_crops_df.apply(compute_market_score, axis=1)\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 4: Recommend Best Crop\n",
    "    # ---------------------------\n",
    "    best_crop_row = suitable_crops_df.loc[suitable_crops_df['MarketScore'].idxmax()]\n",
    "    best_crop = best_crop_row['Crop']\n",
    "    expected_income = best_crop_row['Yield_kgHa'] * farmer_area * best_crop_row['AvgPrice_INRkg']\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 5: Match Buyers\n",
    "    # ---------------------------\n",
    "    matched_buyers = buyers_df[buyers_df['Crop'].str.lower() == best_crop.lower()]\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 6: Generate MoU Preview\n",
    "    # ---------------------------\n",
    "    mou_text = f\"MoU: Farmer at {farmer_location} agrees to sell {int(best_crop_row['Yield_kgHa']*farmer_area)} kg of {best_crop} to {', '.join(matched_buyers['BuyerName'].tolist()) if not matched_buyers.empty else 'N/A'} at INR {best_crop_row['AvgPrice_INRkg']}/kg.\"\n",
    "\n",
    "    # Translations\n",
    "    try:\n",
    "        mou_hi = translator.translate(mou_text, dest=\"hi\").text\n",
    "        mou_ta = translator.translate(mou_text, dest=\"ta\").text\n",
    "    except:\n",
    "        mou_hi = mou_text\n",
    "        mou_ta = mou_text\n",
    "\n",
    "    # ---------------------------\n",
    "    # Step 7: Display Results\n",
    "    # ---------------------------\n",
    "    st.subheader(\"âœ… Recommendation\")\n",
    "    st.write(f\"**Best Crop:** {best_crop}\")\n",
    "    st.write(f\"**Expected Gross Income:** â‚¹{int(expected_income)}\")\n",
    "\n",
    "    st.subheader(\"ðŸ“¦ Matched Buyers\")\n",
    "    if matched_buyers.empty:\n",
    "        st.warning(\"No buyers found for this crop in dataset.\")\n",
    "    else:\n",
    "        st.dataframe(matched_buyers[['BuyerName','PriceOffer_INRkg','MonthlyDemand_kg','Contact','Location']])\n",
    "\n",
    "    st.subheader(\"ðŸ“œ MoU Preview\")\n",
    "    st.write(\"**English:**\")\n",
    "    st.write(mou_text)\n",
    "    st.write(\"**Hindi:**\")\n",
    "    st.write(mou_hi)\n",
    "    st.write(\"**Tamil:**\")\n",
    "    st.write(mou_ta)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
